{
  "ver": "1.0.25",
  "uuid": "b9fb23d0-8c3b-4dbc-a697-864595216c54",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nuniform float angle;\nuniform float widht;\nuniform float runTime;\nuniform float interval;\nuniform float delay;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nfloat flash(vec2 uv, float angle, float width, float runTime, float interval, float delay) {\n  float brightness = 0.0;\n  float radian = 0.0174444 * angle;\n  float startTime = floor(runTime / (interval + delay)) * (interval + delay);\n  float passTime = runTime - startTime - delay;\n  if (passTime > 0.0) {\n    float projX = uv.y / tan(radian);\n    float borderR = passTime / interval * (1.0 + abs(sin(radian)));\n    float borderL = borderR - width;\n    float posR = borderR + projX + borderR * width;\n    float posL = borderL + projX + borderR * width;\n    if (uv.x < posR && uv.x > posL) {\n      float mid = (posL + posR) * 0.5;\n      brightness = 1.0 - abs(uv.x - mid) / (width * 0.5);\n    }\n  }\n  return brightness;\n}\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float brightness = flash(v_uv0, angle, widht, runTime, interval, delay);\n  gl_FragColor = o + vec4(1.0, 1.0, 1.0, 1.0) * brightness * o.a;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nuniform params {\n  float  angle;\n  float widht;\n  float runTime;\n  float interval;\n  float delay;\n};\nin vec2 v_uv0;\nuniform sampler2D texture;\nfloat flash(vec2 uv, float angle, float width, float runTime, float interval, float delay) {\n  float brightness = 0.0;\n  float radian = 0.0174444 * angle;\n  float startTime = floor(runTime / (interval + delay)) * (interval + delay);\n  float passTime = runTime - startTime - delay;\n  if (passTime > 0.0) {\n    float projX = uv.y / tan(radian);\n    float borderR = passTime / interval * (1.0 + abs(sin(radian)));\n    float borderL = borderR - width;\n    float posR = borderR + projX + borderR * width;\n    float posL = borderL + projX + borderR * width;\n    if (uv.x < posR && uv.x > posL) {\n      float mid = (posL + posR) * 0.5;\n      brightness = 1.0 - abs(uv.x - mid) / (width * 0.5);\n    }\n  }\n  return brightness;\n}\nvoid main () {\n  vec4 o = vec4(1.0, 1.0, 1.0, 1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float brightness = flash(v_uv0, angle, widht, runTime, interval, delay);\n  gl_FragColor = o + vec4(1.0, 1.0, 1.0, 1.0) * brightness * o.a;\n}"
      }
    }
  ],
  "subMetas": {}
}
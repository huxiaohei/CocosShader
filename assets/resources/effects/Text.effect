/*================================================================
 * Description 文字
 * Email huliuworld@yahoo.com
 * Created on Sun Sep 20 2020 22:52:25
 * Copyright (c) 2020 刘虎
================================================================*/

CCEffect %{
  techniques:
  - name: "Text"
    passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        outline: { int: 1 }
        outlineColor: { vec4: [1.0, 1.0, 1.0, 1.0] }
        outlinStep: { vec2: [0.0, 0.0] }
        colorGradient: { int: 0 }
        startColor: { vec4: [1.0, 1.0, 1.0, 1.0] }
        endColor: { vec4: [1.0, 1.0, 1.0, 1.0] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{

  precision highp float;
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;

  uniform sampler2D texture;
  uniform params {
    vec4 outlineColor;
    vec4 startColor;
    vec4 endColor;
    vec2 outlinStep;
    int outline;
    int colorGradient;
  };

  vec4 calculateOutline(vec4 o) {
    float alpha = o.a;
    alpha += texture2D(texture, v_uv0.st - 3.0 * vec2(outlinStep.x, 0)).a;
	  alpha += texture2D(texture, v_uv0.st - 2.0 * vec2(outlinStep.x, 0)).a;
  	alpha += texture2D(texture, v_uv0.st - 1.0 * vec2(outlinStep.x, 0)).a;
    alpha += texture2D(texture, v_uv0.st + 3.0 * vec2(outlinStep.x, 0)).a;
	  alpha += texture2D(texture, v_uv0.st + 2.0 * vec2(outlinStep.x, 0)).a;
  	alpha += texture2D(texture, v_uv0.st + 1.0 * vec2(outlinStep.x, 0)).a;
    alpha += texture2D(texture, v_uv0.st - 3.0 * vec2(0, outlinStep.y)).a;
	  alpha += texture2D(texture, v_uv0.st - 2.0 * vec2(0, outlinStep.y)).a;
  	alpha += texture2D(texture, v_uv0.st - 1.0 * vec2(0, outlinStep.y)).a;
    alpha += texture2D(texture, v_uv0.st + 3.0 * vec2(0, outlinStep.y)).a;
	  alpha += texture2D(texture, v_uv0.st + 2.0 * vec2(0, outlinStep.y)).a;
  	alpha += texture2D(texture, v_uv0.st + 1.0 * vec2(0, outlinStep.y)).a;
    alpha *= 0.076923;
    if (alpha > 0.076923 && alpha < 0.8) {
      return outlineColor;
    }
    return o;
  }


  vec4 calculateColorGradient(vec4 color) {
    if (color.a < 0.00001) return color;
    float r = startColor.r + (endColor.r - startColor.r) * v_uv0.y;
    float g = startColor.g + (endColor.g - startColor.g) * v_uv0.y;
    float b = startColor.b + (endColor.b - startColor.b) * v_uv0.y;
    return vec4(r, g, b, color.a);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, o);
    o *= v_color;
    ALPHA_TEST(o);
    if (colorGradient == 1) {
      o = calculateColorGradient(o);
    }
    if (outline == 1) {
      o = calculateOutline(o);
    }
    gl_FragColor = o;
  }
}%

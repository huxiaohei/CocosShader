{
  "ver": "1.0.25",
  "uuid": "5dfc95e5-5067-445f-80ed-dc6a8cab2275",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 outlineColor;\nuniform vec4 startColor;\nuniform vec4 endColor;\nuniform vec2 outlinStep;\nuniform int outline;\nuniform int colorGradient;\nvec4 calculateOutline(vec4 o) {\n  float alpha = o.a;\n  alpha += texture2D(texture, v_uv0.st - 3.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st - 2.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st - 1.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st + 3.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st + 2.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st + 1.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st - 3.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st - 2.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st - 1.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st + 3.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st + 2.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st + 1.0 * vec2(0, outlinStep.y)).a;\n  alpha *= 0.076923;\n  if (alpha > 0.076923 && alpha < 0.8) {\n    return outlineColor;\n  }\n  return o;\n}\nvec4 calculateColorGradient(vec4 color) {\n  if (color.a < 0.00001) return color;\n  float r = startColor.r + (endColor.r - startColor.r) * v_uv0.y;\n  float g = startColor.g + (endColor.g - startColor.g) * v_uv0.y;\n  float b = startColor.b + (endColor.b - startColor.b) * v_uv0.y;\n  return vec4(r, g, b, color.a);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if (colorGradient == 1) {\n    o = calculateColorGradient(o);\n  }\n  if (outline == 1) {\n    o = calculateOutline(o);\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform params {\n  vec4 outlineColor;\n  vec4 startColor;\n  vec4 endColor;\n  vec2 outlinStep;\n  int outline;\n  int colorGradient;\n};\nvec4 calculateOutline(vec4 o) {\n  float alpha = o.a;\n  alpha += texture2D(texture, v_uv0.st - 3.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st - 2.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st - 1.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st + 3.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st + 2.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st + 1.0 * vec2(outlinStep.x, 0)).a;\n  alpha += texture2D(texture, v_uv0.st - 3.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st - 2.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st - 1.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st + 3.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st + 2.0 * vec2(0, outlinStep.y)).a;\n  alpha += texture2D(texture, v_uv0.st + 1.0 * vec2(0, outlinStep.y)).a;\n  alpha *= 0.076923;\n  if (alpha > 0.076923 && alpha < 0.8) {\n    return outlineColor;\n  }\n  return o;\n}\nvec4 calculateColorGradient(vec4 color) {\n  if (color.a < 0.00001) return color;\n  float r = startColor.r + (endColor.r - startColor.r) * v_uv0.y;\n  float g = startColor.g + (endColor.g - startColor.g) * v_uv0.y;\n  float b = startColor.b + (endColor.b - startColor.b) * v_uv0.y;\n  return vec4(r, g, b, color.a);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if (colorGradient == 1) {\n    o = calculateColorGradient(o);\n  }\n  if (outline == 1) {\n    o = calculateOutline(o);\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}